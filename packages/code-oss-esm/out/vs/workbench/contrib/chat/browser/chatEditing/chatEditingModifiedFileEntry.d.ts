import { Disposable, IReference } from '../../../../../base/common/lifecycle.js';
import { IObservable, ITransaction } from '../../../../../base/common/observable.js';
import { URI } from '../../../../../base/common/uri.js';
import { OffsetEdit } from '../../../../../editor/common/core/offsetEdit.js';
import { IDocumentDiff } from '../../../../../editor/common/diff/documentDiffProvider.js';
import { TextEdit } from '../../../../../editor/common/languages.js';
import { ILanguageService } from '../../../../../editor/common/languages/language.js';
import { ITextModel } from '../../../../../editor/common/model.js';
import { IEditorWorkerService } from '../../../../../editor/common/services/editorWorker.js';
import { IModelService } from '../../../../../editor/common/services/model.js';
import { IResolvedTextEditorModel, ITextModelService } from '../../../../../editor/common/services/resolverService.js';
import { IFileService } from '../../../../../platform/files/common/files.js';
import { IUndoRedoService } from '../../../../../platform/undoRedo/common/undoRedo.js';
import { IChatAgentResult } from '../../common/chatAgents.js';
import { ChatEditKind, IModifiedFileEntry, WorkingSetEntryState } from '../../common/chatEditingService.js';
import { IChatService } from '../../common/chatService.js';
export declare class ChatEditingModifiedFileEntry extends Disposable implements IModifiedFileEntry {
    private readonly _multiDiffEntryDelegate;
    private _telemetryInfo;
    private readonly _chatService;
    private readonly _editorWorkerService;
    private readonly _undoRedoService;
    private readonly _fileService;
    static readonly scheme = "modified-file-entry";
    private static lastEntryId;
    readonly entryId: string;
    private readonly docSnapshot;
    private readonly originalContent;
    private readonly doc;
    private readonly docFileEditorModel;
    private _allEditsAreFromUs;
    private readonly _onDidDelete;
    get onDidDelete(): import("../../../../../base/common/event.js").Event<void>;
    get originalURI(): URI;
    get originalModel(): ITextModel;
    get modifiedURI(): URI;
    get modifiedModel(): ITextModel;
    private readonly _stateObs;
    get state(): IObservable<WorkingSetEntryState>;
    private readonly _isCurrentlyBeingModifiedObs;
    get isCurrentlyBeingModified(): IObservable<boolean>;
    private readonly _rewriteRatioObs;
    get rewriteRatio(): IObservable<number>;
    private _isFirstEditAfterStartOrSnapshot;
    private _edit;
    private _isEditFromUs;
    private _diffOperation;
    private _diffOperationIds;
    private readonly _diffInfo;
    get diffInfo(): IObservable<IDocumentDiff>;
    private readonly _editDecorationClear;
    private _editDecorations;
    private static readonly _editDecorationOptions;
    get telemetryInfo(): IModifiedEntryTelemetryInfo;
    readonly createdInRequestId: string | undefined;
    get lastModifyingRequestId(): string;
    constructor(resourceRef: IReference<IResolvedTextEditorModel>, _multiDiffEntryDelegate: {
        collapse: (transaction: ITransaction | undefined) => void;
    }, _telemetryInfo: IModifiedEntryTelemetryInfo, kind: ChatEditKind, modelService: IModelService, textModelService: ITextModelService, languageService: ILanguageService, _chatService: IChatService, _editorWorkerService: IEditorWorkerService, _undoRedoService: IUndoRedoService, _fileService: IFileService);
    private _clearCurrentEditLineDecoration;
    updateTelemetryInfo(telemetryInfo: IModifiedEntryTelemetryInfo): void;
    createSnapshot(requestId: string | undefined): ISnapshotEntry;
    restoreFromSnapshot(snapshot: ISnapshotEntry): void;
    resetToInitialValue(value: string): void;
    acceptStreamingEditsStart(tx: ITransaction): void;
    acceptStreamingEditsEnd(tx: ITransaction): void;
    private _resetEditsState;
    private _mirrorEdits;
    acceptAgentEdits(textEdits: TextEdit[], isLastEdits: boolean): void;
    private _applyEdits;
    private _updateDiffInfoSeq;
    private _updateDiffInfo;
    accept(transaction: ITransaction | undefined): Promise<void>;
    reject(transaction: ITransaction | undefined): Promise<void>;
    private _setDocValue;
    collapse(transaction: ITransaction | undefined): Promise<void>;
    private _notifyAction;
}
export interface IModifiedEntryTelemetryInfo {
    agentId: string | undefined;
    command: string | undefined;
    sessionId: string;
    requestId: string;
    result: IChatAgentResult | undefined;
}
export interface ISnapshotEntry {
    readonly resource: URI;
    readonly languageId: string;
    readonly snapshotUri: URI;
    readonly original: string;
    readonly current: string;
    readonly originalToCurrentEdit: OffsetEdit;
    readonly state: WorkingSetEntryState;
    telemetryInfo: IModifiedEntryTelemetryInfo;
}
