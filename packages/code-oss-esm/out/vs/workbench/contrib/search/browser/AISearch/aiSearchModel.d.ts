import { Emitter, Event } from '../../../../../base/common/event.js';
import { Disposable } from '../../../../../base/common/lifecycle.js';
import { URI } from '../../../../../base/common/uri.js';
import { ITextModel } from '../../../../../editor/common/model.js';
import { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';
import { ILabelService } from '../../../../../platform/label/common/label.js';
import { IUriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentity.js';
import { IAITextQuery, IFileMatch } from '../../../../services/search/common/search.js';
import { NotebookEditorWidget } from '../../../notebook/browser/notebookEditorWidget.js';
import { FileMatchImpl } from '../searchTreeModel/fileMatch.js';
import { ISearchResult, ISearchTreeFolderMatchWorkspaceRoot, ISearchTreeFolderMatch, ISearchTreeFolderMatchWithResource, ITextSearchHeading, IChangeEvent, ISearchModel, ISearchTreeFileMatch } from '../searchTreeModel/searchTreeCommon.js';
import { TextSearchHeadingImpl } from '../searchTreeModel/textSearchHeading.js';
export declare class AITextSearchHeadingImpl extends TextSearchHeadingImpl<IAITextQuery> {
    constructor(parent: ISearchResult, instantiationService: IInstantiationService, uriIdentityService: IUriIdentityService);
    name(): string;
    id(): string;
    get isAIContributed(): boolean;
    get query(): IAITextQuery | null;
    set query(query: IAITextQuery | null);
    private _createBaseFolderMatch;
    private createWorkspaceRootWithResourceImpl;
}
export declare class AIFolderMatchWorkspaceRootImpl extends Disposable implements ISearchTreeFolderMatchWorkspaceRoot {
    private _resource;
    private _index;
    private _query;
    private _parent;
    private instantiationService;
    protected _onChange: Emitter<IChangeEvent>;
    readonly onChange: Event<IChangeEvent>;
    private _onDispose;
    readonly onDispose: Event<void>;
    private readonly _id;
    private _name;
    protected _unDisposedFileMatches: Map<string, ISearchTreeFileMatch>;
    protected _fileMatches: Map<string, ISearchTreeFileMatch>;
    constructor(_resource: URI, _id: string, _index: number, _query: IAITextQuery, _parent: ITextSearchHeading, instantiationService: IInstantiationService, labelService: ILabelService);
    get resource(): URI;
    id(): string;
    index(): number;
    name(): string;
    count(): number;
    doAddFile(fileMatch: ISearchTreeFileMatch): void;
    private latestRank;
    createAndConfigureFileMatch(rawFileMatch: IFileMatch<URI>, searchInstanceID: string): FileMatchImpl;
    isAIContributed(): boolean;
    private onFileChange;
    get hasChildren(): boolean;
    parent(): ISearchTreeFolderMatch | ITextSearchHeading;
    matches(): (ISearchTreeFileMatch | ISearchTreeFolderMatchWithResource)[];
    allDownstreamFileMatches(): ISearchTreeFileMatch[];
    remove(matches: ISearchTreeFileMatch | ISearchTreeFolderMatchWithResource | (ISearchTreeFileMatch | ISearchTreeFolderMatchWithResource)[]): void;
    addFileMatch(raw: IFileMatch[], silent: boolean, searchInstanceID: string): void;
    isEmpty(): boolean;
    clear(clearingAll?: boolean): void;
    get showHighlights(): boolean;
    get searchModel(): ISearchModel;
    get _searchResult(): ISearchResult;
    get query(): IAITextQuery | null;
    getDownstreamFileMatch(uri: URI): ISearchTreeFileMatch | null;
    replaceAll(): Promise<any>;
    recursiveFileCount(): number;
    doRemoveFile(fileMatches: ISearchTreeFileMatch[], dispose?: boolean, trigger?: boolean, keepReadonly?: boolean): void;
    replace(match: ISearchTreeFileMatch): Promise<any>;
    replacingAll: boolean;
    bindModel(model: ITextModel): void;
    unbindNotebookEditorWidget(editor: NotebookEditorWidget, resource: URI): void;
    bindNotebookEditorWidget(editor: NotebookEditorWidget, resource: URI): Promise<void>;
    hasOnlyReadOnlyMatches(): boolean;
    fileMatchesIterator(): IterableIterator<ISearchTreeFileMatch>;
    folderMatchesIterator(): IterableIterator<ISearchTreeFolderMatchWithResource>;
    recursiveMatchCount(): number;
    private disposeMatches;
    dispose(): void;
}
