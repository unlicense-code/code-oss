import { IModelService } from '../../../../../editor/common/services/model.js';
import { ILabelService } from '../../../../../platform/label/common/label.js';
import { ISearchRange, ITextSearchMatch, IPatternInfo, ITextSearchPreviewOptions, IFileMatch } from '../../../../services/search/common/search.js';
import { ICellViewModel } from '../../../notebook/browser/notebookBrowser.js';
import { NotebookEditorWidget } from '../../../notebook/browser/notebookEditorWidget.js';
import { INotebookEditorService } from '../../../notebook/browser/services/notebookEditorService.js';
import { INotebookCellMatchNoModel } from '../../common/searchNotebookHelpers.js';
import { INotebookCellMatchWithModel } from './searchNotebookHelpers.js';
import { ISearchTreeMatch, ISearchTreeFolderMatch, ISearchTreeFolderMatchWorkspaceRoot } from '../searchTreeModel/searchTreeCommon.js';
import { IReplaceService } from '../replace.js';
import { FileMatchImpl } from '../searchTreeModel/fileMatch.js';
import { ICellMatch, IMatchInNotebook, INotebookFileInstanceMatch } from './notebookSearchModelBase.js';
import { MatchImpl } from '../searchTreeModel/match.js';
export declare class MatchInNotebook extends MatchImpl implements IMatchInNotebook {
    private readonly _cellParent;
    private _webviewIndex;
    constructor(_cellParent: ICellMatch, _fullPreviewLines: string[], _fullPreviewRange: ISearchRange, _documentRange: ISearchRange, webviewIndex?: number);
    parent(): INotebookFileInstanceMatch;
    get cellParent(): ICellMatch;
    private notebookMatchTypeString;
    isWebviewMatch(): boolean;
    get isReadonly(): boolean;
    get cellIndex(): number;
    get webviewIndex(): number | undefined;
    get cell(): ICellViewModel | undefined;
}
export declare class CellMatch implements ICellMatch {
    private readonly _parent;
    private _cell;
    private readonly _cellIndex;
    private _contentMatches;
    private _webviewMatches;
    private _context;
    constructor(_parent: INotebookFileInstanceMatch, _cell: ICellViewModel | undefined, _cellIndex: number);
    hasCellViewModel(): boolean;
    get context(): Map<number, string>;
    matches(): MatchInNotebook[];
    get contentMatches(): MatchInNotebook[];
    get webviewMatches(): MatchInNotebook[];
    remove(matches: MatchInNotebook | MatchInNotebook[]): void;
    clearAllMatches(): void;
    addContentMatches(textSearchMatches: ITextSearchMatch[]): void;
    addContext(textSearchMatches: ITextSearchMatch[]): void;
    addWebviewMatches(textSearchMatches: ITextSearchMatch[]): void;
    setCellModel(cell: ICellViewModel): void;
    get parent(): INotebookFileInstanceMatch;
    get id(): string;
    get cellIndex(): number;
    get cell(): ICellViewModel | undefined;
}
export declare class NotebookCompatibleFileMatch extends FileMatchImpl implements INotebookFileInstanceMatch {
    private readonly searchInstanceID;
    private readonly notebookEditorService;
    private _notebookEditorWidget;
    private _editorWidgetListener;
    private _notebookUpdateScheduler;
    private _lastEditorWidgetIdForUpdate;
    constructor(_query: IPatternInfo, _previewOptions: ITextSearchPreviewOptions | undefined, _maxResults: number | undefined, _parent: ISearchTreeFolderMatch, rawMatch: IFileMatch, _closestRoot: ISearchTreeFolderMatchWorkspaceRoot | null, searchInstanceID: string, modelService: IModelService, replaceService: IReplaceService, labelService: ILabelService, notebookEditorService: INotebookEditorService);
    private _cellMatches;
    get cellContext(): Map<string, Map<number, string>>;
    getCellMatch(cellID: string): ICellMatch | undefined;
    addCellMatch(rawCell: INotebookCellMatchNoModel | INotebookCellMatchWithModel): void;
    addWebviewMatchesToCell(cellID: string, webviewMatches: ITextSearchMatch[]): void;
    addContentMatchesToCell(cellID: string, contentMatches: ITextSearchMatch[]): void;
    private revealCellRange;
    bindNotebookEditorWidget(widget: NotebookEditorWidget): void;
    unbindNotebookEditorWidget(widget?: NotebookEditorWidget): void;
    updateNotebookHighlights(): void;
    private _addNotebookHighlights;
    private _removeNotebookHighlights;
    private updateNotebookMatches;
    private setNotebookFindMatchDecorationsUsingCellMatches;
    updateMatchesForEditorWidget(): Promise<void>;
    showMatch(match: MatchInNotebook): Promise<void>;
    private highlightCurrentFindMatchDecoration;
    matches(): ISearchTreeMatch[];
    protected removeMatch(match: ISearchTreeMatch): void;
    cellMatches(): ICellMatch[];
    createMatches(): void;
    get hasChildren(): boolean;
    setSelectedMatch(match: ISearchTreeMatch | null): void;
    dispose(): void;
}
export declare function textSearchMatchesToNotebookMatches(textSearchMatches: ITextSearchMatch[], cell: CellMatch): MatchInNotebook[];
