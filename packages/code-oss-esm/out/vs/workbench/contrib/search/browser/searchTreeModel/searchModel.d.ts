import { CancellationToken } from '../../../../../base/common/cancellation.js';
import { Event } from '../../../../../base/common/event.js';
import { Disposable } from '../../../../../base/common/lifecycle.js';
import { URI } from '../../../../../base/common/uri.js';
import { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';
import { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';
import { ILogService } from '../../../../../platform/log/common/log.js';
import { ITelemetryService } from '../../../../../platform/telemetry/common/telemetry.js';
import { INotebookSearchService } from '../../common/notebookSearch.js';
import { ReplacePattern } from '../../../../services/search/common/replace.js';
import { IAITextQuery, IFileMatch, ISearchComplete, ISearchProgressItem, ISearchService, ITextQuery } from '../../../../services/search/common/search.js';
import { IChangeEvent, SearchModelLocation, ISearchModel, ISearchResult } from './searchTreeCommon.js';
import { ISearchViewModelWorkbenchService } from './searchViewModelWorkbenchService.js';
export declare class SearchModelImpl extends Disposable implements ISearchModel {
    private readonly searchService;
    private readonly telemetryService;
    private readonly configurationService;
    private readonly instantiationService;
    private readonly logService;
    private readonly notebookSearchService;
    private _searchResult;
    private _searchQuery;
    private _replaceActive;
    private _replaceString;
    private _replacePattern;
    private _preserveCase;
    private _startStreamDelay;
    private readonly _resultQueue;
    private readonly _aiResultQueue;
    private readonly _onReplaceTermChanged;
    readonly onReplaceTermChanged: Event<void>;
    private readonly _onSearchResultChanged;
    readonly onSearchResultChanged: Event<IChangeEvent>;
    private currentCancelTokenSource;
    private currentAICancelTokenSource;
    private searchCancelledForNewSearch;
    private aiSearchCancelledForNewSearch;
    location: SearchModelLocation;
    private readonly _aiTextResultProviderName;
    private readonly _id;
    constructor(searchService: ISearchService, telemetryService: ITelemetryService, configurationService: IConfigurationService, instantiationService: IInstantiationService, logService: ILogService, notebookSearchService: INotebookSearchService);
    id(): string;
    getAITextResultProviderName(): Promise<string>;
    isReplaceActive(): boolean;
    set replaceActive(replaceActive: boolean);
    get replacePattern(): ReplacePattern | null;
    get replaceString(): string;
    set preserveCase(value: boolean);
    get preserveCase(): boolean;
    set replaceString(replaceString: string);
    get searchResult(): ISearchResult;
    addAIResults(onProgress?: (result: ISearchProgressItem) => void): Promise<ISearchComplete>;
    aiSearch(query: IAITextQuery, onProgress?: (result: ISearchProgressItem) => void): Promise<ISearchComplete>;
    private doSearch;
    get hasAIResults(): boolean;
    get hasPlainResults(): boolean;
    search(query: ITextQuery, onProgress?: (result: ISearchProgressItem) => void, callerToken?: CancellationToken): {
        asyncResults: Promise<ISearchComplete>;
        syncResults: IFileMatch<URI>[];
    };
    private onSearchCompleted;
    private onSearchError;
    private onSearchProgress;
    private get searchConfig();
    cancelSearch(cancelledForNewSearch?: boolean): boolean;
    cancelAISearch(cancelledForNewSearch?: boolean): boolean;
    dispose(): void;
}
export declare class SearchViewModelWorkbenchService implements ISearchViewModelWorkbenchService {
    private readonly instantiationService;
    readonly _serviceBrand: undefined;
    private _searchModel;
    constructor(instantiationService: IInstantiationService);
    get searchModel(): SearchModelImpl;
    set searchModel(searchModel: SearchModelImpl);
}
