import type { Terminal as RawXtermTerminal } from '@xterm/xterm';
import { IFocusTracker } from '../../../../../base/browser/dom.js';
import { Event } from '../../../../../base/common/event.js';
import { Disposable } from '../../../../../base/common/lifecycle.js';
import './media/terminalChatWidget.css';
import { IContextKeyService } from '../../../../../platform/contextkey/common/contextkey.js';
import { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';
import { InlineChatWidget } from '../../../inlineChat/browser/inlineChatWidget.js';
import { ITerminalInstance, type IXtermTerminal } from '../../../terminal/browser/terminal.js';
import { IStorageService } from '../../../../../platform/storage/common/storage.js';
import { IViewsService } from '../../../../services/views/common/viewsService.js';
import { IChatAcceptInputOptions } from '../../../chat/browser/chat.js';
import { IChatResponseModel } from '../../../chat/common/chatModel.js';
import { IChatService } from '../../../chat/common/chatService.js';
import type { IChatViewState } from '../../../chat/browser/chatWidget.js';
export declare class TerminalChatWidget extends Disposable {
    private readonly _terminalElement;
    private readonly _instance;
    private readonly _xterm;
    private readonly _contextKeyService;
    private readonly _chatService;
    private readonly _storageService;
    private readonly _viewsService;
    private readonly _container;
    private readonly _onDidHide;
    readonly onDidHide: Event<void>;
    private readonly _inlineChatWidget;
    get inlineChatWidget(): InlineChatWidget;
    private readonly _focusTracker;
    private readonly _focusedContextKey;
    private readonly _visibleContextKey;
    private readonly _requestActiveContextKey;
    private readonly _responseContainsCodeBlockContextKey;
    private readonly _responseContainsMulitpleCodeBlocksContextKey;
    private _messages;
    private _historyStorageKey;
    private _viewStateStorageKey;
    private _promptHistory;
    private _lastResponseContent;
    get lastResponseContent(): string | undefined;
    private _terminalAgentName;
    private readonly _model;
    private _sessionCtor;
    private _historyOffset;
    private _historyCandidate;
    private _historyUpdate;
    private _currentRequestId;
    private _activeRequestCts?;
    constructor(_terminalElement: HTMLElement, _instance: ITerminalInstance, _xterm: IXtermTerminal & {
        raw: RawXtermTerminal;
    }, _contextKeyService: IContextKeyService, _chatService: IChatService, _storageService: IStorageService, _viewsService: IViewsService, instantiationService: IInstantiationService);
    private _dimension?;
    private _relayout;
    private _doLayout;
    private _reset;
    reveal(viewState?: IChatViewState): Promise<void>;
    private _getTop;
    private _updateVerticalPosition;
    private _getTerminalWrapperHeight;
    hide(): void;
    private _setTerminalOffset;
    focus(): void;
    hasFocus(): boolean;
    setValue(value?: string): void;
    acceptCommand(shouldExecute: boolean): Promise<void>;
    get focusTracker(): IFocusTracker;
    private _createSession;
    private _loadViewState;
    private _saveViewState;
    private _forcedPlaceholder;
    private _updatePlaceholder;
    private _getPlaceholderText;
    setPlaceholder(text: string): void;
    resetPlaceholder(): void;
    clear(): void;
    acceptInput(query?: string, options?: IChatAcceptInputOptions): Promise<IChatResponseModel | undefined>;
    populateHistory(up: boolean): void;
    cancel(): void;
    viewInChat(): Promise<void>;
}
