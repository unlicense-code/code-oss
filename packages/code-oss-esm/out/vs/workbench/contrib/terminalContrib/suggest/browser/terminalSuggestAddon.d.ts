import type { ITerminalAddon, Terminal } from '@xterm/xterm';
import { Event } from '../../../../../base/common/event.js';
import { Disposable } from '../../../../../base/common/lifecycle.js';
import { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';
import { IContextKey } from '../../../../../platform/contextkey/common/contextkey.js';
import { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';
import { type ITerminalCapabilityStore } from '../../../../../platform/terminal/common/capabilities/capabilities.js';
import { ITerminalConfigurationService } from '../../../terminal/browser/terminal.js';
import { ISimpleSelectedSuggestion } from '../../../../services/suggest/browser/simpleSuggestWidget.js';
import { ITerminalCompletionService } from './terminalCompletionService.js';
import { TerminalShellType } from '../../../../../platform/terminal/common/terminal.js';
export interface ISuggestController {
    isPasting: boolean;
    selectPreviousSuggestion(): void;
    selectPreviousPageSuggestion(): void;
    selectNextSuggestion(): void;
    selectNextPageSuggestion(): void;
    acceptSelectedSuggestion(suggestion?: Pick<ISimpleSelectedSuggestion, 'item' | 'model'>): void;
    hideSuggestWidget(): void;
}
export declare class SuggestAddon extends Disposable implements ITerminalAddon, ISuggestController {
    private readonly _shellType;
    private readonly _capabilities;
    private readonly _terminalSuggestWidgetVisibleContextKey;
    private readonly _terminalCompletionService;
    private readonly _configurationService;
    private readonly _instantiationService;
    private readonly _terminalConfigurationService;
    private _terminal?;
    private _promptInputModel?;
    private readonly _promptInputModelSubscriptions;
    private _mostRecentPromptInputState?;
    private _currentPromptInputState?;
    private _model?;
    private _container?;
    private _screen?;
    private _suggestWidget?;
    private _enableWidget;
    private _pathSeparator;
    private _isFilteringDirectories;
    private _mostRecentCompletion?;
    private _leadingLineContent?;
    private _cursorIndexDelta;
    private _requestedCompletionsIndex;
    private _providerReplacementIndex;
    private _lastUserData?;
    static lastAcceptedCompletionTimestamp: number;
    private _cancellationTokenSource;
    isPasting: boolean;
    private readonly _onBell;
    readonly onBell: Event<void>;
    private readonly _onAcceptedCompletion;
    readonly onAcceptedCompletion: Event<string>;
    private readonly _onDidReceiveCompletions;
    readonly onDidReceiveCompletions: Event<void>;
    constructor(_shellType: TerminalShellType | undefined, _capabilities: ITerminalCapabilityStore, _terminalSuggestWidgetVisibleContextKey: IContextKey<boolean>, _terminalCompletionService: ITerminalCompletionService, _configurationService: IConfigurationService, _instantiationService: IInstantiationService, _terminalConfigurationService: ITerminalConfigurationService);
    activate(xterm: Terminal): void;
    private _handleCompletionProviders;
    setContainerWithOverflow(container: HTMLElement): void;
    setScreen(screen: HTMLElement): void;
    requestCompletions(): Promise<void>;
    private _sync;
    private _getTerminalDimensions;
    private _showCompletions;
    private _ensureSuggestWidget;
    selectPreviousSuggestion(): void;
    selectPreviousPageSuggestion(): void;
    selectNextSuggestion(): void;
    selectNextPageSuggestion(): void;
    acceptSelectedSuggestion(suggestion?: Pick<ISimpleSelectedSuggestion, 'item' | 'model'>, respectRunOnEnter?: boolean): void;
    hideSuggestWidget(): void;
}
export declare function normalizePathSeparator(path: string, sep: string): string;
